@model IEnumerable<DiversityPub.Models.AgentTerrain>
@{
    ViewData["Title"] = "Surveillance des Agents Terrain";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="mb-0">
                        <i class="fas fa-users-cog text-primary"></i> Surveillance des Agents Terrain
                    </h1>
                    <p class="text-muted mb-0">Suivi en temps réel des positions et activités</p>
                </div>
                <div class="d-flex gap-2">
                    <a href="@Url.Action("Map", "AgentSurveillance")" class="btn btn-info">
                        <i class="fas fa-map"></i> Vue Carte
                    </a>
                    <a href="@Url.Action("Activity", "AgentSurveillance")" class="btn btn-secondary">
                        <i class="fas fa-chart-line"></i> Activité
                    </a>
                </div>
            </div>

            <!-- Messages -->
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="fas fa-check-circle"></i> @TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle"></i> @TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }

            <!-- Statistiques -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="totalAgents">@Model.Count()</h4>
                                    <small>Total Agents</small>
                                </div>
                                <i class="fas fa-users fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="onlineAgents">0</h4>
                                    <small>En Ligne</small>
                                </div>
                                <i class="fas fa-wifi fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-dark">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="activeActivations">0</h4>
                                    <small>Activations Actives</small>
                                </div>
                                <i class="fas fa-tasks fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-danger text-white">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4 class="mb-0" id="openIncidents">0</h4>
                                    <small>Incidents Ouverts</small>
                                </div>
                                <i class="fas fa-exclamation-triangle fa-2x opacity-50"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Carte -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-map-marker-alt"></i> Positions en Temps Réel
                    </h5>
                </div>
                <div class="card-body">
                    <div id="map" style="height: 400px; width: 100%;"></div>
                </div>
            </div>

            <!-- Liste des agents -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-list"></i> Liste des Agents
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="agentsTable">
                            <thead>
                                <tr>
                                    <th>Agent</th>
                                    <th>Statut</th>
                                    <th>Dernière Position</th>
                                    <th>Activations Actives</th>
                                    <th>Incidents</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var agent in Model)
                                {
                                    var lastPosition = agent.PositionsGPS.FirstOrDefault();
                                    var isOnline = lastPosition?.Horodatage > DateTime.Now.AddMinutes(-10);
                                    var activeActivations = agent.Activations.Count(a => a.Statut == DiversityPub.Models.enums.StatutActivation.EnCours);
                                    var openIncidents = agent.Incidents.Count(i => i.Statut == "Ouvert" || i.Statut == "EnCours");
                                    
                                    <tr data-agent-id="@agent.Id">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar-sm me-3">
                                                    <i class="fas fa-user-circle fa-2x text-primary"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">@agent.Utilisateur.Prenom @agent.Utilisateur.Nom</h6>
                                                    <small class="text-muted">@agent.Utilisateur.Email</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge bg-@(isOnline ? "success" : "secondary")">
                                                <i class="fas fa-circle"></i> @(isOnline ? "En ligne" : "Hors ligne")
                                            </span>
                                        </td>
                                        <td>
                                            @if (lastPosition != null)
                                            {
                                                <div>
                                                    <small class="text-muted">
                                                        <i class="fas fa-map-marker-alt"></i> 
                                                        @lastPosition.Latitude.ToString("F6"), @lastPosition.Longitude.ToString("F6")
                                                    </small>
                                                    <br>
                                                    <small class="text-muted">
                                                        <i class="fas fa-clock"></i> 
                                                        @lastPosition.Horodatage.ToString("dd/MM HH:mm")
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Aucune position</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-info">@activeActivations</span>
                                        </td>
                                        <td>
                                            @if (openIncidents > 0)
                                            {
                                                <span class="badge bg-danger">@openIncidents</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">0</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="@Url.Action("Details", "AgentSurveillance", new { id = agent.Id })" 
                                                   class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <button class="btn btn-sm btn-outline-info" onclick="centerOnAgent('@agent.Id')">
                                                    <i class="fas fa-crosshairs"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Détails Agent -->
<div class="modal fade" id="agentDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-user"></i> Détails de l'Agent
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="agentDetailsContent">
                <!-- Contenu chargé dynamiquement -->
            </div>
        </div>
    </div>
</div>

<style>
    .avatar-sm {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .badge i {
        font-size: 0.7em;
    }
    
    #map {
        border-radius: 8px;
        overflow: hidden;
    }
    
    .agent-marker {
        background: #A32D18;
        border: 2px solid white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }
    
    .agent-marker.online {
        background: #28a745;
    }
    
    .agent-marker.offline {
        background: #6c757d;
    }
</style>

<script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=geometry"></script>
<script>
    let map;
    let markers = {};
    let agentsData = [];

    // Initialisation de la carte
    function initMap() {
        const center = { lat: 48.8566, lng: 2.3522 }; // Paris
        
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: center,
            styles: [
                {
                    featureType: 'poi',
                    elementType: 'labels',
                    stylers: [{ visibility: 'off' }]
                }
            ]
        });
    }

    // Ajouter un marqueur d'agent
    function addAgentMarker(agent) {
        if (!agent.LastPosition) return;
        
        const position = {
            lat: agent.LastPosition.Latitude,
            lng: agent.LastPosition.Longitude
        };
        
        const marker = new google.maps.Marker({
            position: position,
            map: map,
            title: agent.AgentName,
            icon: {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 10,
                fillColor: agent.IsOnline ? '#28a745' : '#6c757d',
                fillOpacity: 1,
                strokeColor: '#ffffff',
                strokeWeight: 2
            }
        });
        
        const infoWindow = new google.maps.InfoWindow({
            content: `
                <div style="padding: 10px;">
                    <h6>${agent.AgentName}</h6>
                    <p><strong>Statut:</strong> ${agent.IsOnline ? 'En ligne' : 'Hors ligne'}</p>
                    <p><strong>Activations actives:</strong> ${agent.ActiveActivations}</p>
                    <p><strong>Incidents ouverts:</strong> ${agent.OpenIncidents}</p>
                    <p><strong>Dernière position:</strong> ${new Date(agent.LastPosition.Horodatage).toLocaleString('fr-FR')}</p>
                </div>
            `
        });
        
        marker.addListener('click', () => {
            infoWindow.open(map, marker);
        });
        
        markers[agent.AgentId] = marker;
    }

    // Mettre à jour les positions
    async function updatePositions() {
        try {
            const response = await fetch('/AgentSurveillance/GetPositions');
            const result = await response.json();
            
            if (result.success) {
                agentsData = result.data;
                
                // Mettre à jour les statistiques
                document.getElementById('onlineAgents').textContent = agentsData.filter(a => a.IsOnline).length;
                document.getElementById('activeActivations').textContent = agentsData.reduce((sum, a) => sum + a.ActiveActivations, 0);
                document.getElementById('openIncidents').textContent = agentsData.reduce((sum, a) => sum + a.OpenIncidents, 0);
                
                // Mettre à jour les marqueurs sur la carte
                agentsData.forEach(agent => {
                    if (markers[agent.AgentId]) {
                        // Mettre à jour la position existante
                        const position = {
                            lat: agent.LastPosition.Latitude,
                            lng: agent.LastPosition.Longitude
                        };
                        markers[agent.AgentId].setPosition(position);
                        
                        // Mettre à jour l'icône selon le statut
                        markers[agent.AgentId].setIcon({
                            path: google.maps.SymbolPath.CIRCLE,
                            scale: 10,
                            fillColor: agent.IsOnline ? '#28a745' : '#6c757d',
                            fillOpacity: 1,
                            strokeColor: '#ffffff',
                            strokeWeight: 2
                        });
                    } else {
                        // Ajouter un nouveau marqueur
                        addAgentMarker(agent);
                    }
                });
                
                // Mettre à jour le tableau
                updateTable();
            }
        } catch (error) {
            console.error('Erreur lors de la mise à jour des positions:', error);
        }
    }

    // Mettre à jour le tableau
    function updateTable() {
        agentsData.forEach(agent => {
            const row = document.querySelector(`tr[data-agent-id="${agent.AgentId}"]`);
            if (row) {
                const statusCell = row.querySelector('td:nth-child(2) .badge');
                const activationsCell = row.querySelector('td:nth-child(4) .badge');
                const incidentsCell = row.querySelector('td:nth-child(5) .badge');
                
                if (statusCell) {
                    statusCell.className = `badge bg-${agent.IsOnline ? 'success' : 'secondary'}`;
                    statusCell.innerHTML = `<i class="fas fa-circle"></i> ${agent.IsOnline ? 'En ligne' : 'Hors ligne'}`;
                }
                
                if (activationsCell) {
                    activationsCell.textContent = agent.ActiveActivations;
                }
                
                if (incidentsCell) {
                    incidentsCell.className = `badge bg-${agent.OpenIncidents > 0 ? 'danger' : 'success'}`;
                    incidentsCell.textContent = agent.OpenIncidents;
                }
            });
        });
    }

    // Centrer la carte sur un agent
    function centerOnAgent(agentId) {
        const agent = agentsData.find(a => a.AgentId === agentId);
        if (agent && agent.LastPosition) {
            const position = {
                lat: agent.LastPosition.Latitude,
                lng: agent.LastPosition.Longitude
            };
            map.setCenter(position);
            map.setZoom(15);
            
            // Ouvrir l'info window du marqueur
            if (markers[agentId]) {
                google.maps.event.trigger(markers[agentId], 'click');
            }
        }
    }

    // Initialisation
    document.addEventListener('DOMContentLoaded', function() {
        initMap();
        updatePositions();
        
        // Mettre à jour toutes les 30 secondes
        setInterval(updatePositions, 30000);
    });
</script> 